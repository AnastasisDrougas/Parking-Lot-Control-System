package gr.hua.dit.it2024023;
import java.util.Scanner;
import java.util.Random;
import java.time.LocalDateTime;
/**
 *
 * @author Anastasis Drougas it2024023
 */
public class Interface 
{//Class Objects.
    Scanner sc = new Scanner(System.in);
    Random random = new Random();
    Function1 function1 = new Function1();//Function1 object (parking entry).
    Function2 function2 = new Function2();//Function2 object (parking departure).
    Function3 function3 = new Function3();//Function3 object (User search).
    ClearScreen clear = new ClearScreen();
    InputHandler input = new InputHandler();//Controls inputs.
    DateTime currentDateTime = new DateTime();
    Menu menu = new Menu();
    
    private final Parkinglot parkingLot;
    ParkingSpotControl spotControl ;
    Function4 function4 ;

    public Interface(Parkinglot parkingLot) {
        this.parkingLot = parkingLot;
        this.function4 = new Function4(function1.getDrivers(), function1.getVehicles());//Function4 object (Save/Write parking state to file).
        this.spotControl = new ParkingSpotControl(parkingLot);
    }
    
    public void control()
    {   
       
        do//This loop ends only when the user types the option 5 (exit application option).
        {
            int answer = menu.printMenuGetAnswer();
            clear.clearScreen();
            //ALL THE OPTIONS (1-5).
            switch (answer) {
                case 1:
                //Function 1 (User enters the system).
                    System.out.println("Please provide the following details:");
                    String name = input.returnName();
                    String licencePlate = input.returnLicencePlate();
                    String phone = input.returnPhone();
                    LocalDateTime entryTime = currentDateTime.currentTime();//Entry date and time.
                    //Check if the user is already in the database.
                    boolean containsName = function1.driverInTheSystem(name); 
                    boolean containsLicencePlate = function1.vehicleInTheSystem(licencePlate); 
                    
                    if ((containsName==true)&&(containsLicencePlate==true))//If "true", system recognises the user and does not need any more details. If "false", user provides more details. 
                    {
                        int space=function1.findSpace(licencePlate); //Returns the space of the user's vehicle.
                        int type=function1.findType(licencePlate); //Returns the type of the user's vehicle.
                        int position =spotControl.findParkingSpot(space,type);//Checking if there is any parking spots available if yes returns the position.
                       
                        if(position==-1){System.out.println("Press [enter] to return to the main menu");sc.nextLine();break;}
                        
                        //Updating the driver's new parking spot.
                        if(position==-2)//If the Electric vehicle went to the ICE vehicles parking spots (because Electric spots are full).
                        {
                            position =spotControl.findParkingSpot(space,1);//Get parking spot in the ICE parking.
                            parkingLot.FreeSpaceICE(position,space);//Free the last position.
                            position=position-space;//Move the new position back.
                            function1.updateVehicleFuelType(licencePlate,1);//Update the vehicle type to ICE.
                            function1.updateDriverPosition(name, position);//Update new position.
                            function1.updateVehiclePosition(licencePlate, position);
                            System.out.println("Press [enter] to return to the main menu");
                            sc.nextLine();
                            break;
                        }
                        function1.updateDriverPosition(name, position);
                        function1.updateVehiclePosition(licencePlate, position);
                        spotControl.printVehicleParkingSpotPosition(position,type);
                    }else
                    {
                        System.out.println("\nYou are not in the system, please enter the following details of your vehicle: ");
                        
                        int ip= random.nextInt(); //Users IP generated by the system, random number between [-2^31,2^31-1]. Unique for every user. Used to connect drivers with their vehicle.
                        
                        do{
                            int space =input.returnSpace();
                            int type = input.returnFuelType();
                            if (((space == 1)||(space== 2))&&((type== 1)||(type== 2)))
                            {
                                if (space != 2)//Case Moto/Car.
                                {
                                    int position =spotControl.findParkingSpot(space,type); //Checking if there is any parking spots for moto/cars available if yes return the position
                                    if(position==-1){System.out.println("Press [enter] to return to the main menu");sc.nextLine();break;}
                                    
                                    //add vehicle to the system.
                                    if(position==-2)//If the Electric Moto/Car went to the ICE vehicles parking spots (because Electric spots are full).
                                    {
                                        position =spotControl.findParkingSpot(space,1);//Get parking spot in the ICE parking.
                                        parkingLot.FreeSpaceICE(position,space);//Free the last position.
                                        position=position-space;//Move the new position back.
                                        type=1;//Update the vehicles type to ICE.
                                        function1.addDriver(name, phone, entryTime, ip, position);
                                        function1.addVehicleMotoCar(licencePlate, space, type, ip,entryTime, position);
                                        System.out.println("Press [enter] to return to the main menu");
                                        sc.nextLine();
                                        break;
                                    }
                                    function1.addDriver(name, phone, entryTime, ip, position);
                                    function1.addVehicleMotoCar(licencePlate, space, type, ip,entryTime, position);
                                    spotControl.printVehicleParkingSpotPosition(position,type);
                                }
                                if (space==2)//Case Truck.
                                {
                                    int size=input.returnSize();
                                    int purpose=input.returnPurpose();
                                    int position =spotControl.findParkingSpot(space,type);//Checking if there is any parking spots for trucks available if yes return the position
                                    if(position==-1){System.out.println("Press [enter] to return to the main menu");sc.nextLine();break;}
                                    int position2 = position+1;//Because trucks get 2 parking spots.
                                    
                                    //add vehicle to the system.
                                    if(position==-2)//If the Electric Truck went to the ICE vehicles parking spots (because Electric spots are full).
                                    {
                                        position =spotControl.findParkingSpot(space,1);//Get parking spot in the ICE parking.
                                        parkingLot.FreeSpaceICE(position,space);//Free the last position.
                                        position=position-space;//Move the new position back.
                                        type=1;//Update the vehicles type to ICE.
                                        function1.addDriver(name, phone, entryTime, ip, position);
                                        function1.addVehicleTruck(size,purpose,licencePlate,space,type,ip,position,entryTime,position2);
                                        System.out.println("Press [enter] to return to the main menu");
                                        sc.nextLine();
                                        break;
                                    }
                                    function1.addDriver(name, phone, entryTime, ip, position);
                                    function1.addVehicleTruck(size,purpose,licencePlate,space,type,ip,position,entryTime,position2);
                                    spotControl.printVehicleParkingSpotPosition(position,type);
                                    
                                }
                                break;//Everything went as planned.
                            }else{System.out.println("\nThe details you provided are incorrect, please try again!\n");}
                        }while(true);
                    }
                    clear.clearScreen();
                    break;
                case 2:                                        
                //Function 2 (User departure).
                    clear.clearScreen();
                    System.out.println("Vehicle Departure:");
                    String licencePlateForDeparture = input.returnLicencePlate();
                  
                    LocalDateTime entryTimeForDeparture = function1.findEntryTime(licencePlateForDeparture);//Try to find the entry time of the vehicle.
                    
                    if(function2.isInTheSystemCheck(entryTimeForDeparture))//Check if the given vehicle is in the parking.
                    {
                        int parkingSpotPosition = function1.returnParkingSpotPosition(licencePlateForDeparture);//Returns parking spot position of the vehicle.
                        if (parkingSpotPosition==-1){
                            System.out.println("Sorry, but your vehicle is not in our parking! Press [enter] to continue: ");
                            sc.nextLine();
                            break;
                        }
                        //Total hours & payment.
                        long totalTime = currentDateTime.totalHours(entryTimeForDeparture);//Returns the total hours.
                        clear.clearScreen();
                        System.out.println("Total hours stayed: " + totalTime);
                        int payment = function2.paymentAfterDeparture(totalTime);//Returns the amount of money the user should pay.
                        System.out.print("Your payment amount is: "+payment+"$"+"\nPress [enter] to proceed with the payment: ");
                        sc.nextLine();
                        
                        //Add user to History
                        int spaceForDeparture = function1.findSpace(licencePlateForDeparture);//Returns space of the vehicle
                        int typeForDeparture =  function1.findType(licencePlateForDeparture);//Returns fuel type of the vehicle.
                        int ipForDeparture = function1.findIP(licencePlateForDeparture);//Returns the IP of the given vehicle
                        String nameForDeparture = function1.findName(ipForDeparture);//Returns the name of the given vehicle's driver
                        String phoneForDeparture = function1.findPhone(ipForDeparture);//Returns the phone of the given vehicle's driver
                        function3.addDriverInHistory(licencePlateForDeparture,nameForDeparture,phoneForDeparture,payment,spaceForDeparture,typeForDeparture,totalTime,entryTimeForDeparture);
                        
                        //Remove the vehicle and free the parking spots.
                        if(typeForDeparture==1)
                        {
                            parkingLot.FreeSpaceICE(parkingSpotPosition,spaceForDeparture);
                            function1.updateDriverPosition(nameForDeparture,-1 );//Set the position to -1 after departure.
                            function1.updateVehiclePosition(licencePlateForDeparture, -1);
                        }else
                        {
                            parkingLot.FreeSpaceEL(parkingSpotPosition,spaceForDeparture);
                            function1.updateDriverPosition(nameForDeparture,-1 );//Set the position to -1 after departure.
                            function1.updateVehiclePosition(licencePlateForDeparture, -1);
                        }
                        clear.clearScreen();
                    }else{clear.clearScreen();}
                    break;
                case 3:
                //User search in the system.
                    int searchOption = function3.searchOptions();
                    switch (searchOption) {
                        case 1://Search for a specific user's history.
                            clear.clearScreen();
                            String phoneForSearch = input.returnPhone();
                            clear.clearScreen();
                            function3.printDriverHistory(phoneForSearch);
                            break;
                        case 2://Print available parking spots.
                            clear.clearScreen();
                            parkingLot.printAvailableParkingSpots();
                            break;
                        default://Search for a specific vehicle history.
                            clear.clearScreen();
                            String licencePlateForSearch = input.returnLicencePlate();
                            clear.clearScreen();
                            function3.printVehicleHistory(licencePlateForSearch);
                            break;
                    }
                        sc.nextLine();
                        clear.clearScreen();
                    break;
               case 4:
                //Print current state of the parking spots with Drivers data and save to file
                    function4.saveDataTofile("parkingLotState.txt");//Save data
                    function4.fileReaderPrint("parkingLotState.txt");//Read/Print data
                    System.out.print("\n\n   Data saved succesfully! Press [enter] to return to the main menu");
                    sc.nextLine();
                    clear.clearScreen();
                    break;
                default:
                    System.out.println("Thank you for using our application!\nHave a nice day!\n\n\n");
                    System.exit(0);
            }
        }while(true);
    }
    
    
    
    public void addSamples()//Add Samples into the system.
    {
        LocalDateTime entryTime = LocalDateTime.now();
        //Sample 1 (FuelType: Diesel/Gas , Space: Car-Moto).
        int position1 =spotControl.findParkingSpot(1,1);
        function1.addDriver("Reece James","6911111111", entryTime, 1, position1);
        function1.addVehicleMotoCar("KMT2000", 1, 1, 1,entryTime, position1);
        //Sample 2 (FuelType: Electric , Space: Car-Moto).
        int position2 =spotControl.findParkingSpot(1,2);
        function1.addDriver("Sophia Turner","6922222222", entryTime, 2, position2);
        function1.addVehicleMotoCar("KMT2001", 1, 2, 2,entryTime, position2);
        //Sample 3 (FuelType: Diesel/Gas , Space: Truck).
        int position3 =spotControl.findParkingSpot(2,1);
        int position3Truck = position3+1;
        function1.addDriver("Cole Palmer","6933333333", entryTime, 3, position3);
        function1.addVehicleTruck(10,1,"KMT2002",2,1,3,position3,entryTime,position3Truck);
    }
    public void addSamplesToHistory()//Add samples to history (for Search in the system option).
    {
        LocalDateTime entryTime = LocalDateTime.now();
         //Sample 1 (FuelType: Diesel/Gas , Space: Truck).
        function3.addDriverInHistory("KMT2003","Jack Morgan","6944444444",12,2,1,20,entryTime);
         //Sample 2 (FuelType: Diesel/Gas , Space: Car-Moto).
        function3.addDriverInHistory("KMT2004","Michael Jordan","6955555555",12,1,1,20,entryTime);
    }
    
}
